<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Kyle Thielk]]></title>
  <link href="http://kylethielk.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://kylethielk.github.io/"/>
  <updated>2014-06-30T14:27:21-05:00</updated>
  <id>http://kylethielk.github.io/</id>
  <author>
    <name><![CDATA[Kyle Thielk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wordpress to Octopress]]></title>
    <link href="http://kylethielk.github.io/blog/wordpress-to-octopress/"/>
    <updated>2014-05-22T09:30:13-05:00</updated>
    <id>http://kylethielk.github.io/blog/wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>Self hosting wordpress is no fun. Even without any plugins installed there is a constant stream of security updates to worry about. Every plugin you do use is a huge gaping security hole waiting to happen. With each and every wordpress update theres a 50/50 chance it will break your theme and/or plugins. Ever tried updating a theme that you made custom changes to?</p>

<p>Using a hosted platform like wordpress.com or WPEngine.com relieves you of most of this burden, but there are still the <a href="http://www.cvedetails.com/vulnerability-list/vendor_id-2337/product_id-4096/Wordpress-Wordpress.html">security exploits</a> constantly being found. It also costs an arm and a leg for a humble personal blog.</p>

<p><img src="/media/images/VPS-Security-Reminder.png" title="My weekly reminder to update VPS and Wordpress Security" alt="My weekly reminder to update VPS and Wordpress Security" /></p>

<p><a href="http://octopress.org">Octopress</a> with free hosting on <a href="https://www.github.com">Github</a> is one of the better options. Hosting on Github gives you the benefit of their reliability and CDN (not to mention its free!). Using Octopress means a completely (almost) static site thats easy to maintain and quick to load.</p>

<p>Starting an octopress blog from scratch is dead simple. <a href="http://octopress.org/docs/">Follow the directions here</a>. Converting from Wordpress is a little bit tricky, but still manageable. Use <a href="https://github.com/thomasf/exitwp">ExitWP</a> to convert your posts to markdown. If you have comments convert them to Disqus and they should seamlessly transfer if the URL stays the same.</p>

<p>Following these two guides as well as Octopress' own documenation I was able to do the entire transfer in an afternoon.</p>

<p><a href="http://zhen.org/blog/migrating-40000-posts-from-wordpress-to-octopress/">Migrating 40,000 Posts from Wordpress to Octopress</a></p>

<p><a href="http://blog.pixelingene.com/2011/09/switching-to-the-octopress-blogging-engine/">Switching to the Octopress Blogging Engine</a></p>

<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move BitBucket Repository to Github]]></title>
    <link href="http://kylethielk.github.io/blog/move-bitbucket-repository-to-github/"/>
    <updated>2014-05-22T09:10:55-05:00</updated>
    <id>http://kylethielk.github.io/blog/move-bitbucket-repository-to-github</id>
    <content type="html"><![CDATA[<p>Alternatively titled &ldquo;Move Remote Git repository to a new Host&rdquo;. These instructions apply for any remote git hosts.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;What remotes am I currently configured <span class="k">for</span>?&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git remote -v&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Remove these remotes&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git remote rm origin&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Set up new remote&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git remote add origin &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/kylethielk/DailyOje.git&quot;</span>&gt;https://github.com/kylethielk/DailyOje.git&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Push existing <span class="nb">history </span>to new remote&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git push -u origin master&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Sidenote: Referring to services like Github as &lsquo;remote hosts&rsquo; is disingenuous since git is decentralized. All repositories are treated equal and our daily git routine is simply keeping all of them in sync. Referring to them in this manner can help clarify which copy we are referring to.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Include native *.so library in APK with Android Studio]]></title>
    <link href="http://kylethielk.github.io/blog/include-native-so-library-in-apk-with-android-studio/"/>
    <updated>2014-04-25T11:23:21-05:00</updated>
    <id>http://kylethielk.github.io/blog/include-native-so-library-in-apk-with-android-studio</id>
    <content type="html"><![CDATA[<p>Using the Android NDK is well documented throughout the internet <em>if</em> you are still using Eclipse. The process is basically the same with Android Studio until the time comes to build your APK. The APK will build fine, but your library *.so file will be missing from the APK and when you attempt to load it with System.loadLibrary(&ldquo;mylibrary&rdquo;) you will get:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">UnsatisfiedLinkError</span><span class="o">:</span> <span class="n">Couldn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">t</span> <span class="n">load</span> <span class="n">mylibrary</span> <span class="n">from</span> <span class="n">loader</span> <span class="n">dalvik</span><span class="o">.</span><span class="na">system</span><span class="o">.</span><span class="na">PathClassLoader</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can view the contents of your APK with the following command to verify libmylibrary.so is not in the APK:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>unzip -l MyApp.apk
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Android Studio&rsquo;s build tool will not look in the usual place:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>SharedLibrary  : libmylibrary.so
</span><span class='line'>Install        : libmylibrary.so <span class="o">=</span>&gt; libs/armeabi/libmylibrary.so
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The trick (thanks to this thread: <a href="https://groups.google.com/forum/#!msg/adt-dev/nQobKd2Gl_8/Z5yWAvCh4h4J">https://groups.google.com/forum/#!msg/adt-dev/nQobKd2Gl_8/Z5yWAvCh4h4J</a>) is to move libmylibrary.so to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>src/main/jniLibs/armeabi/libmylibrary.so
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Voila, your native code is now compiled into your APK. This should work with build tools 0.8+</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMWare Fusion 5: Could not open /dev/vmmon: No such file or directory.]]></title>
    <link href="http://kylethielk.github.io/blog/vmware-fusion-5-could-not-open-devvmmon-no-such-file-or-directory/"/>
    <updated>2014-04-08T07:53:52-05:00</updated>
    <id>http://kylethielk.github.io/blog/vmware-fusion-5-could-not-open-devvmmon-no-such-file-or-directory</id>
    <content type="html"><![CDATA[<p>I ran into this issue recently with VMWare Fusion 5. All of the sudden none of my virtual machines would start. They would all error out with &ldquo;Could not open /dev/vmmon: No such file or directory.&rdquo;</p>

<p>After much head banging I remembered that I had recently installed Intel HAXM. Taking a stab in the dark I uninstalled HAXM:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /System/Library/Extensions/intelhaxm.kext/Contents/Resources/uninstall.sh
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Voila! All of my VM&rsquo;s happily start. My emulators run extremely slow, but at least I can run virtual machines. Will update if I figure out how to get them running in parallel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build iOS App with Jenkins: Code Signing Issues.]]></title>
    <link href="http://kylethielk.github.io/blog/build-ios-app-with-jenkins-code-signing-issues/"/>
    <updated>2014-03-21T08:14:14-05:00</updated>
    <id>http://kylethielk.github.io/blog/build-ios-app-with-jenkins-code-signing-issues</id>
    <content type="html"><![CDATA[<p>Building an iOS application in xCode is easy. It automatically handles all of your certificates and provisioning profiles. Sure it can be finicky at times, but for the most part it just works.</p>

<p>Automatically building your application (i.e with Jenkins) is not so easy. You have to ensure that your private key, certificate and provisioning profile are configured and available. Recently I found out that this is easier said than done.</p>

<p><strong>Ensure your provisioning profile is available</strong></p>

<p>This one is easy. Simply download your provisioning profile from the Developer Center to the build machine and double click it (make sure you are logged in as the user that will be used for your automated builds). xCode will automatically add it to your list of available provisioning profiles. You can see a list of all of your provisioning profiles by browsing to:</p>

<p><em>~/Library/MobileDevice/Provisioning\ Profiles/</em></p>

<p><strong>Add your Certificate and Private Key</strong></p>

<p>This is the tricky part. On your development machine you are more than likely running as an administrator (whereas on your build machine the &lsquo;build user&rsquo; should not be). Simply adding your certificate and key file to the System/Login Keychain and just expecting them to work&hellip;.well it won&rsquo;t work. The solution is to create a new keychain, add your certificate/key here and tell your build to use this new keychain. <em>Note: the creation of a new keychain is not 100% necessary, but I prefer it. Once you start building multiple projects on one machine it helps keep things organized.</em></p>

<p>The following is the pseudo code of what I use. First create new keychain:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Create keychain&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security create-keychain -p &lt;i&gt;YourPassword&lt;/i&gt; NewKeychain.keychain&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Import Cert/Key &amp;ndash; The -A flag is what allows non-interactive use of cert&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security import /path/to/my.cert -t cert -k NewKeychain.keychain -A
</span><span class='line'>security import /path/to/private.p12 -t agg -k NewKeychain.keychain -A
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The build script can then be adjusted as so:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Load keychain, and unlock it&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security list-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/NewKeychain.keychain&amp;rdquo;
</span><span class='line'>security default-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/NewKeychain.keychain&amp;rdquo;
</span><span class='line'>security unlock-keychain -p &amp;ldquo;YourPassword&amp;rdquo; &amp;ldquo;/var/lib/jenkins/Library/Keychains/NewKeychain.keychain&amp;rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;Run Build&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Reset to login keychain&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security list-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/login.keychain&amp;rdquo;
</span><span class='line'>security default-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/login.keychain&amp;rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
