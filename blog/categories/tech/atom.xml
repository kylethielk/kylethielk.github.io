<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Kyle Thielk]]></title>
  <link href="http://kylethielk.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://kylethielk.github.io/"/>
  <updated>2014-05-19T09:22:51-05:00</updated>
  <id>http://kylethielk.github.io/</id>
  <author>
    <name><![CDATA[Kyle Thielk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Include native *.so library in APK with Android Studio]]></title>
    <link href="http://kylethielk.github.io/blog/include-native-so-library-in-apk-with-android-studio/"/>
    <updated>2014-04-25T11:23:21-05:00</updated>
    <id>http://kylethielk.github.io/blog/include-native-so-library-in-apk-with-android-studio</id>
    <content type="html"><![CDATA[<p>Using the Android NDK is well documented throughout the internet <em>if</em> you are still using Eclipse. The process is basically the same with Android Studio until the time comes to build your APK. The APK will build fine, but your library *.so file will be missing from the APK and when you attempt to load it with System.loadLibrary(&ldquo;mylibrary&rdquo;) you will get:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">UnsatisfiedLinkError</span><span class="o">:</span> <span class="n">Couldn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">t</span> <span class="n">load</span> <span class="n">mylibrary</span> <span class="n">from</span> <span class="n">loader</span> <span class="n">dalvik</span><span class="o">.</span><span class="na">system</span><span class="o">.</span><span class="na">PathClassLoader</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can view the contents of your APK with the following command to verify libmylibrary.so is not in the APK:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>unzip -l MyApp.apk
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Android Studio&rsquo;s build tool will not look in the usual place:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>SharedLibrary  : libmylibrary.so
</span><span class='line'>Install        : libmylibrary.so <span class="o">=</span>&gt; libs/armeabi/libmylibrary.so
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The trick (thanks to this thread: <a href="https://groups.google.com/forum/#!msg/adt-dev/nQobKd2Gl_8/Z5yWAvCh4h4J">https://groups.google.com/forum/#!msg/adt-dev/nQobKd2Gl_8/Z5yWAvCh4h4J</a>) is to move libmylibrary.so to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>src/main/jniLibs/armeabi/libmylibrary.so
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Voila, your native code is now compiled into your APK. This should work with build tools 0.8+</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMWare Fusion 5: Could not open /dev/vmmon: No such file or directory.]]></title>
    <link href="http://kylethielk.github.io/blog/vmware-fusion-5-could-not-open-devvmmon-no-such-file-or-directory/"/>
    <updated>2014-04-08T07:53:52-05:00</updated>
    <id>http://kylethielk.github.io/blog/vmware-fusion-5-could-not-open-devvmmon-no-such-file-or-directory</id>
    <content type="html"><![CDATA[<p>I ran into this issue recently with VMWare Fusion 5. All of the sudden none of my virtual machines would start. They would all error out with &ldquo;Could not open /dev/vmmon: No such file or directory.&rdquo;</p>

<p>After much head banging I remembered that I had recently installed Intel HAXM. Taking a stab in the dark I uninstalled HAXM:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /System/Library/Extensions/intelhaxm.kext/Contents/Resources/uninstall.sh
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Voila! All of my VM&rsquo;s happily start. My emulators run extremely slow, but at least I can run virtual machines. Will update if I figure out how to get them running in parallel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build iOS App with Jenkins: Code Signing Issues.]]></title>
    <link href="http://kylethielk.github.io/blog/build-ios-app-with-jenkins-code-signing-issues/"/>
    <updated>2014-03-21T08:14:14-05:00</updated>
    <id>http://kylethielk.github.io/blog/build-ios-app-with-jenkins-code-signing-issues</id>
    <content type="html"><![CDATA[<p>Building an iOS application in xCode is easy. It automatically handles all of your certificates and provisioning profiles. Sure it can be finicky at times, but for the most part it just works.</p>

<p>Automatically building your application (i.e with Jenkins) is not so easy. You have to ensure that your private key, certificate and provisioning profile are configured and available. Recently I found out that this is easier said than done.</p>

<p><strong>Ensure your provisioning profile is available</strong></p>

<p>This one is easy. Simply download your provisioning profile from the Developer Center to the build machine and double click it (make sure you are logged in as the user that will be used for your automated builds). xCode will automatically add it to your list of available provisioning profiles. You can see a list of all of your provisioning profiles by browsing to:</p>

<p><em>~/Library/MobileDevice/Provisioning\ Profiles/</em></p>

<p><strong>Add your Certificate and Private Key</strong></p>

<p>This is the tricky part. On your development machine you are more than likely running as an administrator (whereas on your build machine the &lsquo;build user&rsquo; should not be). Simply adding your certificate and key file to the System/Login Keychain and just expecting them to work&hellip;.well it won&rsquo;t work. The solution is to create a new keychain, add your certificate/key here and tell your build to use this new keychain. <em>Note: the creation of a new keychain is not 100% necessary, but I prefer it. Once you start building multiple projects on one machine it helps keep things organized.</em></p>

<p>The following is the pseudo code of what I use. First create new keychain:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Create keychain&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security create-keychain -p &lt;i&gt;YourPassword&lt;/i&gt; NewKeychain.keychain&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Import Cert/Key &amp;ndash; The -A flag is what allows non-interactive use of cert&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security import /path/to/my.cert -t cert -kÂ NewKeychain.keychain -A
</span><span class='line'>security import /path/to/private.p12 -t agg -k NewKeychain.keychain -A
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The build script can then be adjusted as so:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Load keychain, and unlock it&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security list-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/NewKeychain.keychain&amp;rdquo;
</span><span class='line'>security default-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/NewKeychain.keychain&amp;rdquo;
</span><span class='line'>security unlock-keychain -p &amp;ldquo;YourPassword&amp;rdquo; &amp;ldquo;/var/lib/jenkins/Library/Keychains/NewKeychain.keychain&amp;rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;Run Build&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Reset to login keychain&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;security list-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/login.keychain&amp;rdquo;
</span><span class='line'>security default-keychain -s &amp;ldquo;/var/lib/jenkins/Library/Keychains/login.keychain&amp;rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio Unit Testing Setup]]></title>
    <link href="http://kylethielk.github.io/blog/android-studio-unit-testing-setup/"/>
    <updated>2014-03-18T11:38:37-05:00</updated>
    <id>http://kylethielk.github.io/blog/android-studio-unit-testing-setup</id>
    <content type="html"><![CDATA[<p>I am surprised that there is not official documentation to get a simple &ldquo;Hello, world!&rdquo;-esque unit test setup running in Android Studio.</p>

<p>Fortunately I stumbled on this dead simple guide for running your first unit test in Android Studio:Â <a href="http://nikolaj.hesselholtskov.dk/2013/10/how-to-add-unit-tests-to-android-studio.html">http://nikolaj.hesselholtskov.dk/2013/10/how-to-add-unit-tests-to-android-studio.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C: Instantiate Child Class from Parent]]></title>
    <link href="http://kylethielk.github.io/blog/objective-c-instantiate-child-class-from-parent/"/>
    <updated>2014-02-07T12:27:11-06:00</updated>
    <id>http://kylethielk.github.io/blog/objective-c-instantiate-child-class-from-parent</id>
    <content type="html"><![CDATA[<p>A common problem encountered (in any language) is how to instantiate a child class from an instance of a base parent in a generic way. Â In Objective-C take for example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">@interface</span> <span class="nc">Vehicle</span> : <span class="nc">NSObject</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">Motorcycle</span> : <span class="nc">Vehicle</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">engineCC</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If we have an instance of Vehicle and we want to get an instance of a Motorcycle we could manually copy each property:</p>

<p><strong>Manual Property Copy</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Vehicle</span> <span class="o">*</span><span class="n">vehicle</span> <span class="o">=</span> <span class="p">[</span><span class="n">Vehicle</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">vehicle</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">MyVehicle</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Motorcycle</span> <span class="o">*</span><span class="n">motorcycle</span> <span class="o">=</span> <span class="p">[</span><span class="n">Motorcycle</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">motorcycle</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">vehicle</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="n">motorcycle</span><span class="p">.</span><span class="n">engineCC</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">200</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Seems simple enough in this case, but when the property count starts increasing so does the amount of typing. If only there were a better way&hellip;:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">copyParent:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">parent</span> <span class="nf">intoChild:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="n">child</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">id</span> <span class="n">parentClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">parent</span> <span class="n">class</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">propertyName</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">outCount</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Get a list of properties for the parent class.</span>
</span><span class='line'><span class="n">objc_property_t</span> <span class="o">*</span><span class="n">properties</span> <span class="o">=</span> <span class="n">class_copyPropertyList</span><span class="p">(</span><span class="n">parentClass</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Loop through the parents properties.</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">outCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">objc_property_t</span> <span class="n">property</span> <span class="o">=</span> <span class="n">properties</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Convert the property to a string.</span>
</span><span class='line'>    <span class="n">propertyName</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithCString:</span><span class="n">property_getName</span><span class="p">(</span><span class="n">property</span><span class="p">)</span> <span class="nl">encoding:</span><span class="n">NSASCIIStringEncoding</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Get the parent&#39;s value for the property</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">parent</span> <span class="nl">valueForKey:</span><span class="n">propertyName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//..and copy into the child.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">conformsToProtocol:</span><span class="err">@</span><span class="n">protocol</span><span class="p">(</span><span class="n">NSCopying</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">child</span> <span class="nl">setValue:</span><span class="p">[</span><span class="n">value</span> <span class="n">copy</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">propertyName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">child</span> <span class="nl">setValue:</span><span class="n">value</span> <span class="nl">forKey:</span><span class="n">propertyName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Note: Make sure to import objc/runtime.h:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">objc</span><span class="o">/</span><span class="n">runtime</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Sample Usage (assuming we put the method in a class called Utils):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Vehicle</span> <span class="o">*</span><span class="n">vehicle</span> <span class="o">=</span> <span class="p">[</span><span class="n">Vehicle</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">vehicle</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">MyVehicle</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Motorcycle</span> <span class="o">*</span><span class="n">motorcycle</span> <span class="o">=</span> <span class="p">[</span><span class="n">Motorcycle</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">Utils</span> <span class="nl">copyParent:</span><span class="n">vehicle</span> <span class="nl">intoChild:</span><span class="n">motorcycle</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
